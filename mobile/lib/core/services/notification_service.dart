import 'dart:io';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:timezone/timezone.dart' as tz;

/// NotificationService - Servi√ßo para gerenciar notifica√ß√µes locais
///
/// Respons√°vel por agendar, cancelar e gerenciar notifica√ß√µes de lembretes.
/// Funciona offline e integra com o sistema operacional.
class NotificationService {
  static final FlutterLocalNotificationsPlugin _notifications = 
      FlutterLocalNotificationsPlugin();
  
  static final DeviceInfoPlugin _deviceInfo = DeviceInfoPlugin();
  
  static bool _isInitialized = false;
  
  /// Inicializar o servi√ßo de notifica√ß√µes
  static Future<bool> initialize() async {
    if (_isInitialized) {
      debugPrint('‚úÖ NOTIFICATION: Servi√ßo j√° inicializado');
      return true;
    }
    
    try {
      debugPrint('üîî NOTIFICATION: Inicializando servi√ßo de notifica√ß√µes...');
      
      // Inicializar timezone
      try {
        tz.initializeTimeZones();
        final location = tz.getLocation('America/Sao_Paulo');
        tz.setLocalLocation(location);
        debugPrint('‚úÖ NOTIFICATION: Timezone configurado: ${location.name}');
      } catch (e) {
        debugPrint('‚ö†Ô∏è NOTIFICATION: Erro ao configurar timezone: $e');
        // Continuar mesmo com erro de timezone
      }
      
      // Configura√ß√µes Android
      const AndroidInitializationSettings androidSettings = 
          AndroidInitializationSettings('@mipmap/ic_launcher');
      debugPrint('üîî NOTIFICATION: Configura√ß√µes Android definidas');
      
      // Configura√ß√µes iOS
      const DarwinInitializationSettings iosSettings = 
          DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      );
      debugPrint('üîî NOTIFICATION: Configura√ß√µes iOS definidas');
      
      // Configura√ß√µes gerais
      const InitializationSettings initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );
      
      // Inicializar plugin
      debugPrint('üîî NOTIFICATION: Inicializando plugin...');
      final bool? initialized = await _notifications.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationTapped,
      );
      
      if (initialized == true) {
        _isInitialized = true;
        debugPrint('‚úÖ NOTIFICATION: Servi√ßo inicializado com sucesso');
        return true;
      } else {
        debugPrint('‚ùå NOTIFICATION: Falha na inicializa√ß√£o (retorno: $initialized)');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro na inicializa√ß√£o: $e');
      return false;
    }
  }
  
  /// Callback quando notifica√ß√£o √© tocada
  static void _onNotificationTapped(NotificationResponse response) {
    debugPrint('üîî NOTIFICATION: Notifica√ß√£o tocada - ID: ${response.id}');
    // Aqui voc√™ pode implementar navega√ß√£o espec√≠fica se necess√°rio
  }
  
  /// Solicitar permiss√µes de notifica√ß√£o
  static Future<bool> requestPermissions() async {
    try {
      debugPrint('üîî NOTIFICATION: Solicitando permiss√µes...');
      
      if (Platform.isAndroid) {
        debugPrint('üîî NOTIFICATION: Dispositivo Android detectado');
        
        // Verificar vers√£o do Android
        final androidInfo = await _deviceInfo.androidInfo;
        final sdkInt = androidInfo.version.sdkInt;
        debugPrint('üîî NOTIFICATION: Vers√£o Android SDK: $sdkInt');
        
        // Android 13+ (SDK 33+) requer permiss√£o espec√≠fica
        if (sdkInt >= 33) {
          debugPrint('üîî NOTIFICATION: Android 13+ detectado, solicitando permiss√£o espec√≠fica...');
          final status = await Permission.notification.request();
          final granted = status == PermissionStatus.granted;
          
          debugPrint('üîî NOTIFICATION: Permiss√£o Android: $status (concedida: $granted)');
          return granted;
        } else {
          debugPrint('üîî NOTIFICATION: Android <13, permiss√£o impl√≠cita');
          return true; // Vers√µes anteriores n√£o precisam de permiss√£o expl√≠cita
        }
      } else if (Platform.isIOS) {
        debugPrint('üîî NOTIFICATION: Dispositivo iOS detectado');
        
        // iOS - solicitar atrav√©s do plugin
        final iosPlugin = _notifications
            .resolvePlatformSpecificImplementation<
                IOSFlutterLocalNotificationsPlugin>();
                
        if (iosPlugin == null) {
          debugPrint('‚ö†Ô∏è NOTIFICATION: Plugin iOS n√£o dispon√≠vel');
          return false;
        }
        
        debugPrint('üîî NOTIFICATION: Solicitando permiss√µes iOS...');
        final bool? granted = await iosPlugin.requestPermissions(
          alert: true,
          badge: true,
          sound: true,
        );
        
        debugPrint('üîî NOTIFICATION: Permiss√£o iOS: $granted');
        return granted ?? false;
      } else {
        debugPrint('‚ö†Ô∏è NOTIFICATION: Plataforma n√£o suportada: ${Platform.operatingSystem}');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro ao solicitar permiss√µes: $e');
      return false;
    }
  }
  
  /// Verificar se permiss√µes est√£o concedidas
  static Future<bool> arePermissionsGranted() async {
    try {
      debugPrint('üîî NOTIFICATION: Verificando permiss√µes...');
      
      if (Platform.isAndroid) {
        debugPrint('üîî NOTIFICATION: Verificando permiss√µes no Android...');
        
        // Verificar vers√£o do Android
        final androidInfo = await _deviceInfo.androidInfo;
        final sdkInt = androidInfo.version.sdkInt;
        debugPrint('üîî NOTIFICATION: Vers√£o Android SDK: $sdkInt');
        
        // Android 13+ (SDK 33+) requer permiss√£o espec√≠fica
        if (sdkInt >= 33) {
          final status = await Permission.notification.status;
          debugPrint('üîî NOTIFICATION: Status da permiss√£o Android: $status');
          return status == PermissionStatus.granted;
        } else {
          debugPrint('üîî NOTIFICATION: Android <13, permiss√£o impl√≠cita');
          return true; // Vers√µes anteriores n√£o precisam de permiss√£o expl√≠cita
        }
      } else if (Platform.isIOS) {
        debugPrint('üîî NOTIFICATION: Verificando permiss√µes no iOS...');
        
        final iosPlugin = _notifications
            .resolvePlatformSpecificImplementation<
                IOSFlutterLocalNotificationsPlugin>();
        
        if (iosPlugin != null) {
          final permissions = await iosPlugin.checkPermissions();
          final isEnabled = permissions?.isEnabled == true;
          debugPrint('üîî NOTIFICATION: Permiss√µes iOS: $permissions (habilitadas: $isEnabled)');
          return isEnabled;
        } else {
          debugPrint('‚ö†Ô∏è NOTIFICATION: Plugin iOS n√£o dispon√≠vel');
          return false;
        }
      } else {
        debugPrint('‚ö†Ô∏è NOTIFICATION: Plataforma n√£o suportada: ${Platform.operatingSystem}');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro ao verificar permiss√µes: $e');
      return false;
    }
  }
  
  /// Verificar se o dispositivo permite alarmes exatos
  static Future<bool> _canScheduleExactAlarms() async {
    if (!Platform.isAndroid) return true;
    
    try {
      // Verificar vers√£o do Android
      final androidInfo = await _deviceInfo.androidInfo;
      final sdkInt = androidInfo.version.sdkInt;
      
      // Android 12+ (SDK 31+) requer permiss√£o para alarmes exatos
      if (sdkInt >= 31) {
        // N√£o h√° m√©todo direto para verificar, ent√£o tentamos usar um m√©todo seguro
        // que n√£o lan√ßar√° exce√ß√£o se n√£o tivermos permiss√£o
        try {
          // Verificar se temos permiss√µes de notifica√ß√£o primeiro
          final hasNotificationPermission = await arePermissionsGranted();
          if (!hasNotificationPermission) {
            debugPrint('‚ö†Ô∏è NOTIFICATION: Sem permiss√£o de notifica√ß√£o b√°sica');
            return false;
          }
          
          debugPrint('üîî NOTIFICATION: Verificando permiss√£o para alarmes exatos...');
          
          // N√£o podemos verificar diretamente, ent√£o assumimos que n√£o temos permiss√£o
          // e deixamos o sistema lidar com isso durante o agendamento
          return false;
        } catch (e) {
          debugPrint('‚ö†Ô∏è NOTIFICATION: Erro ao verificar permiss√£o de alarmes exatos: $e');
          return false;
        }
      } else {
        // Vers√µes anteriores n√£o t√™m essa restri√ß√£o
        return true;
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è NOTIFICATION: Erro ao verificar permiss√£o de alarmes exatos: $e');
      return false;
    }
  }
  
  /// Agendar notifica√ß√£o di√°ria
  static Future<int?> scheduleDaily({
    required int hour,
    required int minute,
    required String title,
    required String body,
  }) async {
    try {
      // Inicializar se necess√°rio
      if (!_isInitialized) {
        debugPrint('üîî NOTIFICATION: Servi√ßo n√£o inicializado, inicializando...');
        final initialized = await initialize();
        if (!initialized) {
          debugPrint('‚ùå NOTIFICATION: Falha ao inicializar servi√ßo');
          return null;
        }
      }
      
      // Verificar permiss√µes
      final hasPermissions = await arePermissionsGranted();
      if (!hasPermissions) {
        debugPrint('‚ùå NOTIFICATION: Sem permiss√µes para notifica√ß√µes');
        final granted = await requestPermissions();
        if (!granted) {
          debugPrint('‚ùå NOTIFICATION: Permiss√µes negadas pelo usu√°rio');
          return null;
        }
      }
      
      // Gerar ID √∫nico
      final int notificationId = _generateUniqueId();
      
      debugPrint('üîî NOTIFICATION: Agendando notifica√ß√£o di√°ria ${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')} - ID: $notificationId');
      
      // Configurar detalhes da notifica√ß√£o
      final notificationDetails = _getNotificationDetails();
      
      // Calcular pr√≥ximo hor√°rio
      final scheduledDate = _nextInstanceOfTime(hour, minute);
      debugPrint('üîî NOTIFICATION: Pr√≥ximo hor√°rio calculado: $scheduledDate');
      
      // Verificar se podemos usar alarmes exatos
      final canUseExactAlarms = await _canScheduleExactAlarms();
      
      // Agendar notifica√ß√£o
      debugPrint('üîî NOTIFICATION: Enviando solicita√ß√£o de agendamento...');
      
      if (canUseExactAlarms) {
        debugPrint('üîî NOTIFICATION: Usando modo exato para agendamento');
        await _notifications.zonedSchedule(
          notificationId,
          title,
          body,
          scheduledDate,
          notificationDetails,
          androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
          uiLocalNotificationDateInterpretation:
              UILocalNotificationDateInterpretation.absoluteTime,
          matchDateTimeComponents: DateTimeComponents.time, // Repetir diariamente
        );
      } else {
        debugPrint('üîî NOTIFICATION: Usando modo inexato para agendamento (alarmes exatos n√£o permitidos)');
        await _notifications.zonedSchedule(
          notificationId,
          title,
          body,
          scheduledDate,
          notificationDetails,
          androidScheduleMode: AndroidScheduleMode.inexactAllowWhileIdle,
          uiLocalNotificationDateInterpretation:
              UILocalNotificationDateInterpretation.absoluteTime,
          matchDateTimeComponents: DateTimeComponents.time, // Repetir diariamente
        );
      }
      
      // Verificar se a notifica√ß√£o foi agendada
      final pendingNotifications = await _notifications.pendingNotificationRequests();
      final isScheduled = pendingNotifications.any((notification) => notification.id == notificationId);
      
      if (isScheduled) {
        debugPrint('‚úÖ NOTIFICATION: Notifica√ß√£o agendada com sucesso - ID: $notificationId');
        return notificationId;
      } else {
        debugPrint('‚ö†Ô∏è NOTIFICATION: Notifica√ß√£o n√£o encontrada ap√≥s agendamento');
        return notificationId; // Retornar ID mesmo assim, pode ser um falso negativo
      }
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro ao agendar notifica√ß√£o: $e');
      
      // Tentar novamente com modo inexato se o erro for relacionado a alarmes exatos
      if (e.toString().contains('exact_alarms_not_permitted')) {
        try {
          debugPrint('üîî NOTIFICATION: Tentando novamente com modo inexato...');
          
          // Gerar ID √∫nico
          final int notificationId = _generateUniqueId();
          
          // Configurar detalhes da notifica√ß√£o
          final notificationDetails = _getNotificationDetails();
          
          // Calcular pr√≥ximo hor√°rio
          final scheduledDate = _nextInstanceOfTime(hour, minute);
          
          await _notifications.zonedSchedule(
            notificationId,
            title,
            body,
            scheduledDate,
            notificationDetails,
            androidScheduleMode: AndroidScheduleMode.inexactAllowWhileIdle,
            uiLocalNotificationDateInterpretation:
                UILocalNotificationDateInterpretation.absoluteTime,
            matchDateTimeComponents: DateTimeComponents.time, // Repetir diariamente
          );
          
          debugPrint('‚úÖ NOTIFICATION: Notifica√ß√£o agendada com sucesso (modo inexato) - ID: $notificationId');
          return notificationId;
        } catch (retryError) {
          debugPrint('‚ùå NOTIFICATION: Erro ao tentar novamente: $retryError');
          return null;
        }
      }
      
      return null;
    }
  }
  
  /// Cancelar notifica√ß√£o espec√≠fica
  static Future<bool> cancel(int notificationId) async {
    try {
      debugPrint('üîî NOTIFICATION: Cancelando notifica√ß√£o ID: $notificationId');
      
      await _notifications.cancel(notificationId);
      
      debugPrint('‚úÖ NOTIFICATION: Notifica√ß√£o cancelada com sucesso');
      return true;
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro ao cancelar notifica√ß√£o: $e');
      return false;
    }
  }
  
  /// Cancelar todas as notifica√ß√µes
  static Future<bool> cancelAll() async {
    try {
      debugPrint('üîî NOTIFICATION: Cancelando todas as notifica√ß√µes');
      
      await _notifications.cancelAll();
      
      debugPrint('‚úÖ NOTIFICATION: Todas as notifica√ß√µes canceladas');
      return true;
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro ao cancelar todas as notifica√ß√µes: $e');
      return false;
    }
  }
  
  /// Listar notifica√ß√µes pendentes
  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    try {
      final pending = await _notifications.pendingNotificationRequests();
      debugPrint('üîî NOTIFICATION: ${pending.length} notifica√ß√µes pendentes');
      return pending;
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro ao listar notifica√ß√µes pendentes: $e');
      return [];
    }
  }
  
  /// Configurar detalhes da notifica√ß√£o
  static NotificationDetails _getNotificationDetails() {
    // Configura√ß√µes Android
    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'reminders_channel',
      'Lembretes',
      channelDescription: 'Notifica√ß√µes de lembretes do C\'Alma',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      enableVibration: true,
      playSound: true,
      icon: '@mipmap/ic_launcher',
    );
    
    // Configura√ß√µes iOS
    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'default',
    );
    
    return const NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
  }
  
  /// Calcular pr√≥xima inst√¢ncia do hor√°rio
  static tz.TZDateTime _nextInstanceOfTime(int hour, int minute) {
    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduledDate = tz.TZDateTime(
      tz.local,
      now.year,
      now.month,
      now.day,
      hour,
      minute,
    );
    
    // Se o hor√°rio j√° passou hoje, agendar para amanh√£
    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }
    
    debugPrint('üîî NOTIFICATION: Pr√≥ximo disparo: $scheduledDate');
    return scheduledDate;
  }
  
  /// Gerar ID √∫nico para notifica√ß√£o
  static int _generateUniqueId() {
    // Usar timestamp + random para garantir unicidade
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final random = Random().nextInt(1000);
    return int.parse('${timestamp.toString().substring(8)}$random');
  }
  
  /// Abrir configura√ß√µes de alarmes exatos (Android 12+)
  static Future<bool> openExactAlarmSettings() async {
    if (!Platform.isAndroid) return false;
    
    try {
      final androidInfo = await _deviceInfo.androidInfo;
      final sdkInt = androidInfo.version.sdkInt;
      
      // Android 12+ (SDK 31+)
      if (sdkInt >= 31) {
        // Usar Intent para abrir configura√ß√µes de alarmes exatos
        // Isso √© feito atrav√©s de um m√©todo personalizado que usa o plugin
        debugPrint('üîî NOTIFICATION: Tentando abrir configura√ß√µes de alarmes exatos...');
        
        // N√£o h√° m√©todo direto para isso no plugin, ent√£o retornamos false
        // e orientamos o usu√°rio a fazer isso manualmente
        debugPrint('‚ö†Ô∏è NOTIFICATION: N√£o foi poss√≠vel abrir configura√ß√µes automaticamente');
        return false;
      }
      
      return false;
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro ao abrir configura√ß√µes de alarmes exatos: $e');
      return false;
    }
  }
  
  /// Testar notifica√ß√£o imediata (para debug)
  static Future<bool> showTestNotification() async {
    try {
      // Inicializar se necess√°rio
      if (!_isInitialized) {
        debugPrint('üîî NOTIFICATION: Servi√ßo n√£o inicializado, inicializando...');
        final initialized = await initialize();
        if (!initialized) {
          debugPrint('‚ùå NOTIFICATION: Falha ao inicializar servi√ßo');
          return false;
        }
      }
      
      // Verificar permiss√µes
      final hasPermissions = await arePermissionsGranted();
      if (!hasPermissions) {
        debugPrint('‚ùå NOTIFICATION: Sem permiss√µes para notifica√ß√µes');
        final granted = await requestPermissions();
        if (!granted) {
          debugPrint('‚ùå NOTIFICATION: Permiss√µes negadas pelo usu√°rio');
          return false;
        }
      }
      
      debugPrint('üîî NOTIFICATION: Enviando notifica√ß√£o de teste...');
      
      final notificationDetails = _getNotificationDetails();
      
      // ID √∫nico para cada teste
      final testId = DateTime.now().millisecondsSinceEpoch % 100000;
      
      await _notifications.show(
        testId,
        'Teste de Notifica√ß√£o',
        'Esta √© uma notifica√ß√£o de teste do C\'Alma - ${DateTime.now().toString()}',
        notificationDetails,
      );
      
      debugPrint('‚úÖ NOTIFICATION: Notifica√ß√£o de teste enviada com ID: $testId');
      return true;
    } catch (e) {
      debugPrint('‚ùå NOTIFICATION: Erro ao enviar notifica√ß√£o de teste: $e');
      return false;
    }
  }
}
