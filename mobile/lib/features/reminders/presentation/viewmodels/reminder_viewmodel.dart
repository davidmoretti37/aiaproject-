import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:device_info_plus/device_info_plus.dart';

import '../../../../core/services/notification_service.dart';
import '../../domain/models/reminder_model.dart';
import '../../domain/repositories/reminder_repository.dart';

/// ReminderViewModel - ViewModel para gerenciar os lembretes
///
/// Gerencia o estado dos lembretes usando o ReminderModel atualizado
/// e fornece m√©todos para interagir com o reposit√≥rio seguindo Clean Architecture.
class ReminderViewModel extends ChangeNotifier {
  final ReminderRepository _repository;
  
  /// Lista de lembretes
  List<ReminderModel> _reminders = [];
  
  /// Indica se uma opera√ß√£o est√° em andamento
  bool isLoading = false;
  
  /// Mensagem de erro, se houver
  String? errorMessage;
  
  /// Mensagem de sucesso, se houver
  String? successMessage;
  
  /// Limite m√°ximo de lembretes por usu√°rio
  static const int maxReminders = 3;
  
  /// Construtor do ReminderViewModel
  ReminderViewModel(this._repository) {
    _initializeNotifications();
    _loadReminders();
  }
  
  /// Obt√©m a lista de lembretes
  List<ReminderModel> get reminders => List.unmodifiable(_reminders);
  
  /// Obt√©m apenas lembretes ativos
  List<ReminderModel> get activeReminders => 
      _reminders.where((r) => r.isActive).toList();
  
  /// Verifica se pode adicionar mais lembretes
  bool get canAddMoreReminders => _reminders.length < maxReminders;
  
  /// Obt√©m o n√∫mero de lembretes restantes
  int get remainingSlots => maxReminders - _reminders.length;
  
  /// Inicializa as notifica√ß√µes e solicita permiss√µes
  Future<void> _initializeNotifications() async {
    try {
      debugPrint('üîî VIEWMODEL: Verificando permiss√µes de notifica√ß√£o...');
      
      final hasPermissions = await NotificationService.arePermissionsGranted();
      if (!hasPermissions) {
        debugPrint('üîî VIEWMODEL: Solicitando permiss√µes de notifica√ß√£o...');
        final granted = await NotificationService.requestPermissions();
        
        if (!granted) {
          debugPrint('‚ö†Ô∏è VIEWMODEL: Permiss√µes de notifica√ß√£o negadas');
          // N√£o bloquear o app, apenas avisar que notifica√ß√µes n√£o funcionar√£o
        } else {
          debugPrint('‚úÖ VIEWMODEL: Permiss√µes de notifica√ß√£o concedidas');
        }
      } else {
        debugPrint('‚úÖ VIEWMODEL: Permiss√µes de notifica√ß√£o j√° concedidas');
      }
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Erro ao verificar permiss√µes: $e');
    }
  }
  
  /// Carrega os lembretes do usu√°rio atual
  Future<void> _loadReminders() async {
    try {
      debugPrint('üîÑ VIEWMODEL: Carregando lembretes...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      final result = await _repository.getReminders();
      
      result.fold(
        (error) {
          debugPrint('‚ùå VIEWMODEL: Erro ao carregar lembretes: $error');
          errorMessage = error;
          _reminders = [];
        },
        (reminders) {
          debugPrint('‚úÖ VIEWMODEL: ${reminders.length} lembretes carregados');
          _reminders = reminders;
        },
      );
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Exce√ß√£o ao carregar lembretes: $e');
      errorMessage = 'Erro inesperado ao carregar lembretes';
      _reminders = [];
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Recarrega os lembretes
  Future<void> refreshReminders() async {
    await _loadReminders();
  }
  
  /// Adiciona um novo lembrete
  Future<bool> addReminder(TimeOfDay time) async {
    try {
      if (!canAddMoreReminders) {
        errorMessage = 'Voc√™ j√° atingiu o limite de $maxReminders lembretes';
        notifyListeners();
        return false;
      }
      
      // Verificar se j√° existe um lembrete neste hor√°rio
      final hasExistingReminder = _reminders.any(
        (r) => r.hour == time.hour && r.minute == time.minute,
      );
      
      if (hasExistingReminder) {
        errorMessage = 'J√° existe um lembrete neste hor√°rio';
        notifyListeners();
        return false;
      }
      
      debugPrint('üîÑ VIEWMODEL: Adicionando lembrete ${time.hour}:${time.minute}...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      final newReminder = ReminderModel.fromTimeOfDay(
        userId: 'temp', // O reposit√≥rio vai definir o userId correto
        time: time,
      );
      
      final result = await _repository.saveReminder(newReminder);
      
      return result.fold(
        (error) {
          debugPrint('‚ùå VIEWMODEL: Erro ao adicionar lembrete: $error');
          errorMessage = error;
          return false;
        },
        (savedReminder) {
          debugPrint('‚úÖ VIEWMODEL: Lembrete adicionado com sucesso');
          _reminders.add(savedReminder);
          
          // Ordenar por hor√°rio
          _reminders.sort((a, b) {
            if (a.hour != b.hour) return a.hour.compareTo(b.hour);
            return a.minute.compareTo(b.minute);
          });
          
          successMessage = 'Lembrete adicionado com sucesso!';
          return true;
        },
      );
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Exce√ß√£o ao adicionar lembrete: $e');
      errorMessage = 'Erro inesperado ao adicionar lembrete';
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Atualiza um lembrete existente
  Future<bool> updateReminder(String id, TimeOfDay newTime) async {
    try {
      debugPrint('üîÑ VIEWMODEL: Atualizando lembrete $id...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      final reminderIndex = _reminders.indexWhere((r) => r.id == id);
      if (reminderIndex == -1) {
        errorMessage = 'Lembrete n√£o encontrado';
        return false;
      }
      
      // Verificar se j√° existe outro lembrete neste hor√°rio
      final hasExistingReminder = _reminders.any(
        (r) => r.id != id && r.hour == newTime.hour && r.minute == newTime.minute,
      );
      
      if (hasExistingReminder) {
        errorMessage = 'J√° existe um lembrete neste hor√°rio';
        return false;
      }
      
      final updatedReminder = _reminders[reminderIndex].copyWith(
        hour: newTime.hour,
        minute: newTime.minute,
      );
      
      final result = await _repository.saveReminder(updatedReminder);
      
      return result.fold(
        (error) {
          debugPrint('‚ùå VIEWMODEL: Erro ao atualizar lembrete: $error');
          errorMessage = error;
          return false;
        },
        (savedReminder) {
          debugPrint('‚úÖ VIEWMODEL: Lembrete atualizado com sucesso');
          _reminders[reminderIndex] = savedReminder;
          
          // Reordenar por hor√°rio
          _reminders.sort((a, b) {
            if (a.hour != b.hour) return a.hour.compareTo(b.hour);
            return a.minute.compareTo(b.minute);
          });
          
          successMessage = 'Lembrete atualizado com sucesso!';
          return true;
        },
      );
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Exce√ß√£o ao atualizar lembrete: $e');
      errorMessage = 'Erro inesperado ao atualizar lembrete';
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Remove um lembrete
  Future<bool> removeReminder(String id) async {
    try {
      debugPrint('üîÑ VIEWMODEL: Removendo lembrete $id...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      final result = await _repository.deleteReminder(id);
      
      return result.fold(
        (error) {
          debugPrint('‚ùå VIEWMODEL: Erro ao remover lembrete: $error');
          errorMessage = error;
          return false;
        },
        (_) {
          debugPrint('‚úÖ VIEWMODEL: Lembrete removido com sucesso');
          _reminders.removeWhere((r) => r.id == id);
          successMessage = 'Lembrete removido com sucesso!';
          return true;
        },
      );
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Exce√ß√£o ao remover lembrete: $e');
      errorMessage = 'Erro inesperado ao remover lembrete';
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Ativa/desativa um lembrete
  Future<bool> toggleReminderStatus(String id) async {
    try {
      debugPrint('üîÑ VIEWMODEL: Alternando status do lembrete $id...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      final reminderIndex = _reminders.indexWhere((r) => r.id == id);
      if (reminderIndex == -1) {
        errorMessage = 'Lembrete n√£o encontrado';
        return false;
      }
      
      // Usar o m√©todo adicional do reposit√≥rio se dispon√≠vel
      // Por enquanto, vamos usar o saveReminder com o status alterado
      final updatedReminder = _reminders[reminderIndex].copyWith(
        isActive: !_reminders[reminderIndex].isActive,
      );
      
      final result = await _repository.saveReminder(updatedReminder);
      
      return result.fold(
        (error) {
          debugPrint('‚ùå VIEWMODEL: Erro ao alterar status do lembrete: $error');
          errorMessage = error;
          return false;
        },
        (savedReminder) {
          debugPrint('‚úÖ VIEWMODEL: Status do lembrete alterado com sucesso');
          _reminders[reminderIndex] = savedReminder;
          
          final status = savedReminder.isActive ? 'ativado' : 'desativado';
          successMessage = 'Lembrete $status com sucesso!';
          return true;
        },
      );
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Exce√ß√£o ao alterar status do lembrete: $e');
      errorMessage = 'Erro inesperado ao alterar status do lembrete';
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Limpa mensagens de erro e sucesso
  void clearMessages() {
    errorMessage = null;
    successMessage = null;
    notifyListeners();
  }
  
  /// Testa o envio de notifica√ß√£o imediata
  Future<bool> testNotification() async {
    try {
      debugPrint('üîî VIEWMODEL: Enviando notifica√ß√£o de teste...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      // Verificar permiss√µes primeiro
      final hasPermissions = await NotificationService.arePermissionsGranted();
      if (!hasPermissions) {
        debugPrint('‚ö†Ô∏è VIEWMODEL: Sem permiss√µes para notifica√ß√µes');
        final granted = await NotificationService.requestPermissions();
        if (!granted) {
          errorMessage = 'Permiss√µes de notifica√ß√£o negadas. Por favor, verifique as configura√ß√µes do seu dispositivo.';
          return false;
        }
      }
      
      // Inicializar servi√ßo se necess√°rio
      await NotificationService.initialize();
      
      // Enviar notifica√ß√£o de teste
      final success = await NotificationService.showTestNotification();
      
      if (success) {
        debugPrint('‚úÖ VIEWMODEL: Notifica√ß√£o de teste enviada com sucesso');
        successMessage = 'Notifica√ß√£o de teste enviada com sucesso! Verifique se ela apareceu no seu dispositivo.';
        return true;
      } else {
        debugPrint('‚ö†Ô∏è VIEWMODEL: Falha ao enviar notifica√ß√£o de teste');
        errorMessage = 'N√£o foi poss√≠vel enviar a notifica√ß√£o de teste. Verifique as permiss√µes do aplicativo.';
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Erro ao enviar notifica√ß√£o de teste: $e');
      
      // Verificar se o erro est√° relacionado a alarmes exatos
      if (e.toString().contains('exact_alarms_not_permitted')) {
        errorMessage = 'Seu dispositivo n√£o permite alarmes exatos. Os lembretes podem n√£o ser precisos. Verifique as configura√ß√µes do dispositivo.';
      } else {
        errorMessage = 'Erro ao enviar notifica√ß√£o de teste: $e';
      }
      
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Verifica e solicita permiss√µes de notifica√ß√£o
  Future<bool> checkAndRequestPermissions() async {
    try {
      debugPrint('üîî VIEWMODEL: Verificando permiss√µes de notifica√ß√£o...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      // Inicializar servi√ßo se necess√°rio
      await NotificationService.initialize();
      
      // Verificar permiss√µes atuais
      final hasPermissions = await NotificationService.arePermissionsGranted();
      if (hasPermissions) {
        debugPrint('‚úÖ VIEWMODEL: Permiss√µes de notifica√ß√£o j√° concedidas');
        
        // Verificar se estamos em um dispositivo Android 12+ para mostrar informa√ß√µes sobre alarmes exatos
        if (Platform.isAndroid) {
          try {
            final deviceInfo = DeviceInfoPlugin();
            final androidInfo = await deviceInfo.androidInfo;
            final sdkInt = androidInfo.version.sdkInt;
            
            if (sdkInt >= 31) {
              successMessage = 'Permiss√µes de notifica√ß√£o concedidas. Nota: Para lembretes precisos, voc√™ pode precisar permitir "Alarmes e lembretes" nas configura√ß√µes do aplicativo.';
            } else {
              successMessage = 'Permiss√µes de notifica√ß√£o concedidas';
            }
          } catch (e) {
            successMessage = 'Permiss√µes de notifica√ß√£o concedidas';
          }
        } else {
          successMessage = 'Permiss√µes de notifica√ß√£o concedidas';
        }
        
        return true;
      }
      
      // Solicitar permiss√µes
      debugPrint('üîî VIEWMODEL: Solicitando permiss√µes de notifica√ß√£o...');
      final granted = await NotificationService.requestPermissions();
      
      if (granted) {
        debugPrint('‚úÖ VIEWMODEL: Permiss√µes de notifica√ß√£o concedidas');
        successMessage = 'Permiss√µes de notifica√ß√£o concedidas';
        return true;
      } else {
        debugPrint('‚ö†Ô∏è VIEWMODEL: Permiss√µes de notifica√ß√£o negadas');
        errorMessage = 'Permiss√µes de notifica√ß√£o negadas. Por favor, verifique as configura√ß√µes do seu dispositivo.';
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Erro ao verificar permiss√µes: $e');
      errorMessage = 'Erro ao verificar permiss√µes: $e';
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Abre as configura√ß√µes de alarmes exatos (Android 12+)
  Future<bool> openExactAlarmSettings() async {
    try {
      debugPrint('üîî VIEWMODEL: Tentando abrir configura√ß√µes de alarmes exatos...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      if (!Platform.isAndroid) {
        debugPrint('‚ö†Ô∏è VIEWMODEL: N√£o √© um dispositivo Android');
        errorMessage = 'Esta configura√ß√£o s√≥ est√° dispon√≠vel em dispositivos Android 12+';
        return false;
      }
      
      // Verificar vers√£o do Android
      final deviceInfo = DeviceInfoPlugin();
      final androidInfo = await deviceInfo.androidInfo;
      final sdkInt = androidInfo.version.sdkInt;
      
      if (sdkInt < 31) {
        debugPrint('‚ö†Ô∏è VIEWMODEL: Vers√£o do Android n√£o requer permiss√£o de alarmes exatos');
        successMessage = 'Seu dispositivo n√£o requer esta permiss√£o';
        return true;
      }
      
      // Tentar abrir configura√ß√µes
      final success = await NotificationService.openExactAlarmSettings();
      
      if (success) {
        debugPrint('‚úÖ VIEWMODEL: Configura√ß√µes de alarmes exatos abertas');
        successMessage = 'Por favor, ative a permiss√£o "Alarmes e lembretes" nas configura√ß√µes';
        return true;
      } else {
        debugPrint('‚ö†Ô∏è VIEWMODEL: N√£o foi poss√≠vel abrir configura√ß√µes automaticamente');
        errorMessage = 'N√£o foi poss√≠vel abrir as configura√ß√µes automaticamente. Por favor, v√° para Configura√ß√µes > Apps > C\'Alma > Permiss√µes > Alarmes e lembretes';
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Erro ao abrir configura√ß√µes de alarmes exatos: $e');
      errorMessage = 'Erro ao abrir configura√ß√µes: $e';
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Salva m√∫ltiplos lembretes (para uso no onboarding)
  Future<bool> saveMultipleReminders(List<TimeOfDay> times) async {
    try {
      if (times.length > maxReminders) {
        errorMessage = 'M√°ximo de $maxReminders lembretes permitidos';
        notifyListeners();
        return false;
      }
      
      debugPrint('üîÑ VIEWMODEL: Salvando ${times.length} lembretes...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      final result = await _repository.saveReminders(times);
      
      return result.fold(
        (error) {
          debugPrint('‚ùå VIEWMODEL: Erro ao salvar lembretes: $error');
          errorMessage = error;
          return false;
        },
        (savedReminders) {
          debugPrint('‚úÖ VIEWMODEL: Lembretes salvos com sucesso');
          _reminders = savedReminders;
          successMessage = 'Lembretes salvos com sucesso!';
          return true;
        },
      );
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Exce√ß√£o ao salvar lembretes: $e');
      errorMessage = 'Erro inesperado ao salvar lembretes';
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
  
  /// Remove todos os lembretes do usu√°rio
  Future<bool> deleteAllReminders() async {
    try {
      debugPrint('üîÑ VIEWMODEL: Removendo todos os lembretes...');
      
      isLoading = true;
      errorMessage = null;
      successMessage = null;
      notifyListeners();
      
      final result = await _repository.deleteAllReminders();
      
      return result.fold(
        (error) {
          debugPrint('‚ùå VIEWMODEL: Erro ao remover todos os lembretes: $error');
          errorMessage = error;
          return false;
        },
        (_) {
          debugPrint('‚úÖ VIEWMODEL: Todos os lembretes removidos com sucesso');
          _reminders.clear();
          successMessage = 'Todos os lembretes foram removidos!';
          return true;
        },
      );
    } catch (e) {
      debugPrint('‚ùå VIEWMODEL: Exce√ß√£o ao remover todos os lembretes: $e');
      errorMessage = 'Erro inesperado ao remover lembretes';
      return false;
    } finally {
      isLoading = false;
      notifyListeners();
    }
  }
}
