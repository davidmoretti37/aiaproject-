import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/foundation.dart';

/// Servi√ßo para gerenciar prefer√™ncias de notifica√ß√µes
/// Salva localmente quais notifica√ß√µes foram exclu√≠das pelo usu√°rio
class NotificationPreferencesService {
  static const String _dismissedReportsKey = 'dismissed_reports';
  
  /// Marcar uma den√∫ncia como exclu√≠da
  static Future<void> dismissReport(String reportId) async {
    try {
      debugPrint('üì± PREFS: Marcando den√∫ncia como exclu√≠da: $reportId');
      
      final prefs = await SharedPreferences.getInstance();
      final dismissedReports = prefs.getStringList(_dismissedReportsKey) ?? [];
      
      if (!dismissedReports.contains(reportId)) {
        dismissedReports.add(reportId);
        await prefs.setStringList(_dismissedReportsKey, dismissedReports);
        debugPrint('‚úÖ PREFS: Den√∫ncia $reportId marcada como exclu√≠da');
      } else {
        debugPrint('‚ö†Ô∏è PREFS: Den√∫ncia $reportId j√° estava exclu√≠da');
      }
      
    } catch (e) {
      debugPrint('‚ùå PREFS: Erro ao marcar den√∫ncia como exclu√≠da: $e');
    }
  }
  
  /// Verificar se uma den√∫ncia foi exclu√≠da
  static Future<bool> isReportDismissed(String reportId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final dismissedReports = prefs.getStringList(_dismissedReportsKey) ?? [];
      final isDismissed = dismissedReports.contains(reportId);
      
      debugPrint('üîç PREFS: Den√∫ncia $reportId exclu√≠da: $isDismissed');
      return isDismissed;
      
    } catch (e) {
      debugPrint('‚ùå PREFS: Erro ao verificar den√∫ncia exclu√≠da: $e');
      return false;
    }
  }
  
  /// Obter lista de den√∫ncias exclu√≠das
  static Future<List<String>> getDismissedReports() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final dismissedReports = prefs.getStringList(_dismissedReportsKey) ?? [];
      
      debugPrint('üì± PREFS: ${dismissedReports.length} den√∫ncias exclu√≠das');
      return dismissedReports;
      
    } catch (e) {
      debugPrint('‚ùå PREFS: Erro ao obter den√∫ncias exclu√≠das: $e');
      return [];
    }
  }
  
  /// Limpar todas as den√∫ncias exclu√≠das (para debug/reset)
  static Future<void> clearDismissedReports() async {
    try {
      debugPrint('üóëÔ∏è PREFS: Limpando todas as den√∫ncias exclu√≠das');
      
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_dismissedReportsKey);
      
      debugPrint('‚úÖ PREFS: Den√∫ncias exclu√≠das limpas');
      
    } catch (e) {
      debugPrint('‚ùå PREFS: Erro ao limpar den√∫ncias exclu√≠das: $e');
    }
  }
  
  /// Remover uma den√∫ncia espec√≠fica da lista de exclu√≠das
  static Future<void> undismissReport(String reportId) async {
    try {
      debugPrint('üîÑ PREFS: Removendo den√∫ncia da lista de exclu√≠das: $reportId');
      
      final prefs = await SharedPreferences.getInstance();
      final dismissedReports = prefs.getStringList(_dismissedReportsKey) ?? [];
      
      if (dismissedReports.contains(reportId)) {
        dismissedReports.remove(reportId);
        await prefs.setStringList(_dismissedReportsKey, dismissedReports);
        debugPrint('‚úÖ PREFS: Den√∫ncia $reportId removida da lista de exclu√≠das');
      } else {
        debugPrint('‚ö†Ô∏è PREFS: Den√∫ncia $reportId n√£o estava na lista de exclu√≠das');
      }
      
    } catch (e) {
      debugPrint('‚ùå PREFS: Erro ao remover den√∫ncia da lista de exclu√≠das: $e');
    }
  }
}
